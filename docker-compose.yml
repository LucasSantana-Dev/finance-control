services:
  # Database service
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # SonarQube database configuration
      SONAR_DB_NAME: ${SONAR_DB_NAME}
      SONAR_DB_USER: ${SONAR_DB_USER}
      SONAR_DB_PASSWORD: ${SONAR_DB_PASSWORD}
    ports:
      - "${DB_PORT}"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/postgres-init-sonarqube.sh:/docker-entrypoint-initdb.d/postgres-init-sonarqube.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # SonarQube service for code quality analysis
  sonarqube:
    image: sonarqube:10.4-community
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:${DB_PORT}/${SONAR_DB_NAME}
      SONAR_JDBC_USERNAME: ${SONAR_DB_USER}
      SONAR_JDBC_PASSWORD: ${SONAR_DB_PASSWORD}
      SONAR_WEB_PORT: ${SONAR_PORT}
    ports:
      - "${SONAR_PORT}"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - sonarqube
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DEV_MODE: "${DEV_MODE}"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:${DB_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      JAVA_OPTS: "${JAVA_OPTS:-}"
    ports:
      - "${APPLICATION_PORT}:8080"
      - "5005:5005"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./build:/app/build
    restart: unless-stopped

  # Development service for running scripts and Gradle commands
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
      JAVA_OPTS: "${JAVA_OPTS:-}"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - dev
    command: tail -f /dev/null  # Keep container running for interactive use

  # Quality check service
  quality:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
      SKIP_TESTS: "${SKIP_TESTS:-false}"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - quality
    command: >
      sh -c "
        if [ \"$$SKIP_TESTS\" = \"true\" ]; then
          echo 'Running quality checks without tests...'
          ./gradlew checkstyleMain pmdMain spotbugsMain --console=rich
        else
          echo 'Running full quality checks...'
          ./gradlew qualityCheck --console=rich
        fi
      "

  # Test service
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:${DB_PORT}/${POSTGRES_DB}_test
      SKIP_TESTS: "${SKIP_TESTS:-false}"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - test
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        if [ \"$$SKIP_TESTS\" = \"true\" ]; then
          echo 'Skipping test compilation...'
          ./gradlew test --console=rich --no-build-cache
        else
          echo 'Running tests with compilation...'
          ./gradlew test --console=rich
        fi
      "

  # Build service
  build:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
      SKIP_TESTS: "${SKIP_TESTS:-false}"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - build
    command: >
      sh -c "
        if [ \"$$SKIP_TESTS\" = \"true\" ]; then
          echo 'Building without tests...'
          ./gradlew build -x test --console=rich
        else
          echo 'Building with tests...'
          ./gradlew build --console=rich
        fi
      "

  # Environment check service
  check-env:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - check-env
    command: ./scripts/environment/check-environment.sh

  # Fix environment service
  fix-env:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - fix-env
    command: ./scripts/environment/fix-environment.sh

  # Test fixes service
  test-fixes:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - test-fixes
    command: ./scripts/environment/test-fixes.sh

  # Shell service for interactive development
  shell:
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    environment:
      GRADLE_OPTS: "-Dorg.gradle.console=rich -Dorg.gradle.daemon=false"
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - ./build:/app/build
      - ./logs:/app/logs
    working_dir: /app
    profiles:
      - shell
    stdin_open: true
    tty: true
    command: bash

volumes:
  pgdata:
  gradle-cache:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs: