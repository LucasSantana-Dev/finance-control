spring.application.name=finance-control

# JPA Configuration
spring.data.jpa.repositories.enabled=true
spring.jpa.open-in-view=false

# Database Configuration
app.database.url=${DB_URL}
app.database.port=${DB_PORT}
app.database.name=${DB_NAME}
app.database.username=${DB_USERNAME}
app.database.password=${DB_PASSWORD}
app.database.driver-class-name=org.postgresql.Driver

# Database Connection Pool Configuration
app.database.pool.initial-size=${DB_POOL_INITIAL_SIZE:5}
app.database.pool.max-size=${DB_POOL_MAX_SIZE:20}
app.database.pool.min-idle=${DB_POOL_MIN_IDLE:5}
app.database.pool.max-lifetime=${DB_POOL_MAX_LIFETIME:300000}
app.database.pool.connection-timeout=${DB_POOL_CONNECTION_TIMEOUT:20000}
app.database.pool.idle-timeout=${DB_POOL_IDLE_TIMEOUT:300000}
app.database.pool.leak-detection-threshold=${DB_POOL_LEAK_DETECTION_THRESHOLD:60000}

# JPA/Hibernate Configuration
app.jpa.hibernate-ddl-auto=${JPA_DDL_AUTO:validate}
app.jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
app.jpa.show-sql=${JPA_SHOW_SQL:false}
app.jpa.format-sql=${JPA_FORMAT_SQL:false}
app.jpa.use-sql-comments=${JPA_USE_SQL_COMMENTS:false}
app.jpa.defer-datasource-initialization=${JPA_DEFER_DATASOURCE_INIT:false}

# Spring Boot JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

# JPA Properties
app.jpa.properties.hibernate-format-sql=${HIBERNATE_FORMAT_SQL:false}
app.jpa.properties.hibernate-use-sql-comments=${HIBERNATE_USE_SQL_COMMENTS:false}
app.jpa.properties.hibernate-jdbc-batch-size=${HIBERNATE_JDBC_BATCH_SIZE:20}
app.jpa.properties.hibernate-order-inserts=${HIBERNATE_ORDER_INSERTS:true}
app.jpa.properties.hibernate-order-updates=${HIBERNATE_ORDER_UPDATES:true}
app.jpa.properties.hibernate-batch-versioned-data=${HIBERNATE_BATCH_VERSIONED_DATA:true}
app.jpa.properties.hibernate-jdbc-fetch-size=${HIBERNATE_JDBC_FETCH_SIZE:20}
app.jpa.properties.hibernate-default-batch-fetch-size=${HIBERNATE_DEFAULT_BATCH_FETCH_SIZE:16}

# Security Configuration
app.security.jwt.secret=${JWT_SECRET:defaultSecretKeyForDevelopmentOnlyChangeInProduction}
app.security.jwt.expiration-ms=${JWT_EXPIRATION_MS:86400000}
app.security.jwt.refresh-expiration-ms=${JWT_REFRESH_EXPIRATION_MS:604800000}
app.security.jwt.issuer=${JWT_ISSUER:finance-control}
app.security.jwt.audience=${JWT_AUDIENCE:finance-control-users}

# CORS Configuration
app.security.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
app.security.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
app.security.cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
app.security.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}
app.security.cors.max-age=${CORS_MAX_AGE:3600}

# Server Configuration
app.server.port=${SERVER_PORT:8080}
app.server.context-path=${SERVER_CONTEXT_PATH:}
app.server.servlet-path=${SERVER_SERVLET_PATH:/}
app.server.max-http-header-size=${SERVER_MAX_HTTP_HEADER_SIZE:8192}
app.server.max-http-post-size=${SERVER_MAX_HTTP_POST_SIZE:2097152}
app.server.connection-timeout=${SERVER_CONNECTION_TIMEOUT:20000}
app.server.read-timeout=${SERVER_READ_TIMEOUT:30000}
app.server.write-timeout=${SERVER_WRITE_TIMEOUT:30000}

# Logging Configuration
app.logging.level=${LOGGING_LEVEL:INFO}
app.logging.pattern=${LOGGING_PATTERN:%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n}
app.logging.file-path=${LOGGING_FILE_PATH:logs}
app.logging.file-name=${LOGGING_FILE_NAME:finance-control.log}
app.logging.error-file-name=${LOGGING_ERROR_FILE_NAME:finance-control-error.log}
app.logging.max-file-size=${LOGGING_MAX_FILE_SIZE:10485760}
app.logging.max-history=${LOGGING_MAX_HISTORY:30}
app.logging.queue-size=${LOGGING_QUEUE_SIZE:512}
app.logging.async=${LOGGING_ASYNC:true}

# Flyway Configuration
app.flyway.enabled=${FLYWAY_ENABLED:true}
app.flyway.locations=${FLYWAY_LOCATIONS:classpath:db/migration}
app.flyway.baseline-on-migrate=${FLYWAY_BASELINE_ON_MIGRATE:false}
app.flyway.baseline-version=${FLYWAY_BASELINE_VERSION:0}
app.flyway.validate-on-migrate=${FLYWAY_VALIDATE_ON_MIGRATE:true}
app.flyway.out-of-order=${FLYWAY_OUT_OF_ORDER:false}
app.flyway.clean-disabled=${FLYWAY_CLEAN_DISABLED:true}
app.flyway.clean-on-validation-error=${FLYWAY_CLEAN_ON_VALIDATION_ERROR:false}

# Actuator Configuration
app.actuator.enabled=${ACTUATOR_ENABLED:true}
app.actuator.endpoints=${ACTUATOR_ENDPOINTS:health,info,metrics,env}
app.actuator.base-path=${ACTUATOR_BASE_PATH:/actuator}
app.actuator.expose-health-details=${ACTUATOR_EXPOSE_HEALTH_DETAILS:true}

# OpenAPI Configuration
app.open-api.title=${OPENAPI_TITLE:Finance Control API}
app.open-api.description=${OPENAPI_DESCRIPTION:API for managing personal finances}
app.open-api.version=${OPENAPI_VERSION:1.0.0}
app.open-api.contact-name=${OPENAPI_CONTACT_NAME:Finance Control Team}
app.open-api.contact-email=${OPENAPI_CONTACT_EMAIL:support@finance-control.com}
app.open-api.contact-url=${OPENAPI_CONTACT_URL:https://github.com/LucasSantana-Dev/finance-control}
app.open-api.license-name=${OPENAPI_LICENSE_NAME:MIT License}
app.open-api.license-url=${OPENAPI_LICENSE_URL:https://opensource.org/licenses/MIT}
app.open-api.server-url=${OPENAPI_SERVER_URL:http://localhost:8080}
app.open-api.server-description=${OPENAPI_SERVER_DESCRIPTION:Development server}

# Pagination Configuration
app.pagination.default-page-size=${PAGINATION_DEFAULT_PAGE_SIZE:10}
app.pagination.max-page-size=${PAGINATION_MAX_PAGE_SIZE:100}
app.pagination.default-sort=${PAGINATION_DEFAULT_SORT:id}
app.pagination.default-direction=${PAGINATION_DEFAULT_DIRECTION:ASC}

# Legacy Spring Boot Properties (for backward compatibility) - DISABLED
# Using custom DatabaseConfig instead
# spring.datasource.url=${app.database.url}:${app.database.port}/${app.database.name}
# spring.datasource.username=${app.database.username}
# spring.datasource.password=${app.database.password}
# spring.datasource.driver-class-name=${app.database.driver-class-name}

# Bean definition override to resolve JPA auditing handler conflict
spring.main.allow-bean-definition-overriding=true

# Spring Boot JPA properties removed - using custom configuration

logging.level.root=${app.logging.level}
logging.level.com.finance_control=DEBUG
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

spring.flyway.enabled=${app.flyway.enabled}
spring.flyway.locations=${app.flyway.locations}

spring.data.web.pageable.default-page-size=${app.pagination.default-page-size}
spring.data.web.pageable.max-page-size=${app.pagination.max-page-size}

server.port=${app.server.port}
server.servlet.context-path=${app.server.context-path}

management.endpoints.web.exposure.include=${app.actuator.endpoints}
management.endpoint.health.show-details=WHEN_AUTHORIZED
management.endpoints.web.base-path=${app.actuator.base-path}

# JWT Configuration (legacy)
jwt.secret=${app.security.jwt.secret}
jwt.expiration=${app.security.jwt.expiration-ms}

# Spring Boot Redis Configuration
spring.data.redis.host=${app.redis.host}
spring.data.redis.port=${app.redis.port}
spring.data.redis.password=${app.redis.password}
spring.data.redis.database=${app.redis.database}
spring.data.redis.timeout=${app.redis.timeout}
spring.data.redis.lettuce.pool.max-active=${app.redis.pool.max-active}
spring.data.redis.lettuce.pool.max-idle=${app.redis.pool.max-idle}
spring.data.redis.lettuce.pool.min-idle=${app.redis.pool.min-idle}
spring.data.redis.lettuce.pool.max-wait=${app.redis.pool.max-wait}

# Spring Boot Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=${app.cache.ttl.dashboard}
spring.cache.redis.cache-null-values=false
spring.cache.redis.enable-statistics=true

# Monitoring Configuration
app.monitoring.enabled=${MONITORING_ENABLED:true}
app.monitoring.sentry.enabled=${SENTRY_ENABLED:true}
app.monitoring.health-check.interval=${HEALTH_CHECK_INTERVAL:30}

# Spring Boot Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,env,configprops,beans,mappings,loggers
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=always
management.endpoint.info.enabled=true
management.endpoint.metrics.enabled=true
management.metrics.tags.application=finance-control
management.metrics.tags.environment=${SPRING_PROFILES_ACTIVE:dev}

# Sentry Configuration
sentry.dsn=${SENTRY_DSN:}
sentry.environment=${SENTRY_ENVIRONMENT:${SPRING_PROFILES_ACTIVE:dev}}
sentry.release=${SENTRY_RELEASE:1.0.0}
sentry.sample-rate=${SENTRY_SAMPLE_RATE:0.1}
sentry.traces-sample-rate=${SENTRY_TRACES_SAMPLE_RATE:0.1}
sentry.profiles-sample-rate=${SENTRY_PROFILES_SAMPLE_RATE:0.1}
sentry.send-default-pii=${SENTRY_SEND_DEFAULT_PII:false}
sentry.attach-stacktrace=${SENTRY_ATTACH_STACKTRACE:true}
sentry.enable-tracing=${SENTRY_ENABLE_TRACING:true}
sentry.debug=${SENTRY_DEBUG:false}
sentry.server-name=${SENTRY_SERVER_NAME:finance-control}
sentry.tags=${SENTRY_TAGS:environment:dev,service:finance-control}

# Brazilian Market Data Configuration
brazilian-market.bcb.base-url=${BCB_BASE_URL:https://api.bcb.gov.br/dados/serie/bcdata.sgs}
brazilian-market.bcb.api-key=${BCB_API_KEY:}
brazilian-market.stocks.base-url=${BRAZILIAN_STOCKS_API_URL:https://api.brazilianstocks.com}
brazilian-market.alpha-vantage.api-key=${ALPHA_VANTAGE_API_KEY:}
brazilian-market.update-interval=${MARKET_DATA_UPDATE_INTERVAL:3600000}
brazilian-market.cache.enabled=${MARKET_DATA_CACHE_ENABLED:true}
brazilian-market.cache.ttl=${MARKET_DATA_CACHE_TTL:300000}

# External Market Data API Configuration
app.market-data.alpha-vantage.api-key=${ALPHA_VANTAGE_API_KEY:demo}
app.market-data.alpha-vantage.base-url=${ALPHA_VANTAGE_BASE_URL:https://www.alphavantage.co/query}
app.market-data.update-interval-minutes=${MARKET_DATA_UPDATE_INTERVAL_MINUTES:15}
app.market-data.rate-limit-delay-ms=${MARKET_DATA_RATE_LIMIT_DELAY_MS:100}

# Redis Configuration
app.redis.host=${REDIS_HOST:localhost}
app.redis.port=${REDIS_PORT:6379}
app.redis.password=${REDIS_PASSWORD:}
app.redis.database=${REDIS_DATABASE:0}
app.redis.timeout=${REDIS_TIMEOUT:2000}
app.redis.pool.max-active=${REDIS_POOL_MAX_ACTIVE:8}
app.redis.pool.max-idle=${REDIS_POOL_MAX_IDLE:8}
app.redis.pool.min-idle=${REDIS_POOL_MIN_IDLE:0}
app.redis.pool.max-wait=${REDIS_POOL_MAX_WAIT:-1}

# Cache Configuration
app.cache.enabled=${CACHE_ENABLED:true}
app.cache.ttl.dashboard=${CACHE_TTL_DASHBOARD:900000}
app.cache.ttl.market-data=${CACHE_TTL_MARKET_DATA:300000}
app.cache.ttl.user-data=${CACHE_TTL_USER_DATA:1800000}

# Rate Limiting Configuration
app.rate-limit.enabled=${RATE_LIMIT_ENABLED:true}
app.rate-limit.requests-per-minute=${RATE_LIMIT_REQUESTS_PER_MINUTE:100}
app.rate-limit.burst-capacity=${RATE_LIMIT_BURST_CAPACITY:200}
app.rate-limit.refresh-period=${RATE_LIMIT_REFRESH_PERIOD:60}

# Dashboard Configuration
app.dashboard.cache.enabled=${DASHBOARD_CACHE_ENABLED:true}
app.dashboard.cache.ttl=${DASHBOARD_CACHE_TTL:900000}
app.dashboard.default-period-months=${DASHBOARD_DEFAULT_PERIOD_MONTHS:12}
app.dashboard.refresh-interval=${DASHBOARD_REFRESH_INTERVAL:900000}
app.dashboard.max-categories=${DASHBOARD_MAX_CATEGORIES:10}
app.dashboard.chart-colors=${DASHBOARD_CHART_COLORS:#FF6384,#36A2EB,#FFCE56,#4BC0C0,#9966FF,#FF9F40}
