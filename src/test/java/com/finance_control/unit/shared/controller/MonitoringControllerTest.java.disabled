package com.finance_control.unit.shared.controller;

import com.finance_control.shared.monitoring.AlertingService;
import com.finance_control.shared.monitoring.HealthCheckService;
import com.finance_control.shared.monitoring.MetricsService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
@DisplayName("MonitoringController Unit Tests")
class MonitoringControllerTest {

    @Mock
    private HealthCheckService healthCheckService;

    @Mock
    private MetricsService metricsService;

    @Mock
    private AlertingService alertingService;

    private MonitoringController monitoringController;

    @BeforeEach
    void setUp() {
        monitoringController = new MonitoringController(metricsService, alertingService, healthCheckService);
    }

    @Test
    @DisplayName("Should return health status successfully")
    void getHealthStatus_WithHealthySystem_ShouldReturnOk() {
        // Given
        Map<String, Object> healthStatus = new HashMap<>();
        healthStatus.put("overallStatus", "HEALTHY");
        healthStatus.put("database", Map.of("status", "UP"));
        healthStatus.put("redis", Map.of("status", "UP"));

        when(healthCheckService.getDetailedHealthStatus()).thenReturn(healthStatus);

        // When
        ResponseEntity<Map<String, Object>> response = monitoringController.getHealthStatus();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("HEALTHY", response.getBody().get("overallStatus"));
    }

    @Test
    @DisplayName("Should return service unavailable when system is unhealthy")
    void getHealthStatus_WithUnhealthySystem_ShouldReturnServiceUnavailable() {
        // Given
        when(healthCheckService.getDetailedHealthStatus()).thenThrow(new RuntimeException("System error"));

        // When
        ResponseEntity<Map<String, Object>> response = monitoringController.getHealthStatus();

        // Then
        assertEquals(HttpStatus.SERVICE_UNAVAILABLE, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("ERROR", response.getBody().get("status"));
    }

    @Test
    @DisplayName("Should return active alerts successfully")
    void getActiveAlerts_ShouldReturnAlerts() {
        // Given
        List<AlertingService.Alert> alerts = new ArrayList<>();
        AlertingService.Alert alert = new AlertingService.Alert(
            "test_alert", "SYSTEM", "HIGH", "Test alert message", null
        );
        alerts.add(alert);

        when(alertingService.getActiveAlerts()).thenReturn(alerts);

        // When
        ResponseEntity<List<AlertingService.Alert>> response = monitoringController.getActiveAlerts();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(1, response.getBody().size());
        assertEquals("test_alert", response.getBody().get(0).getId());
    }

    @Test
    @DisplayName("Should return empty list when no active alerts")
    void getActiveAlerts_WithNoAlerts_ShouldReturnEmptyList() {
        // Given
        when(alertingService.getActiveAlerts()).thenReturn(new ArrayList<>());

        // When
        ResponseEntity<List<AlertingService.Alert>> response = monitoringController.getActiveAlerts();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().isEmpty());
    }

    @Test
    @DisplayName("Should handle exception when getting alerts")
    void getActiveAlerts_WithException_ShouldReturnInternalServerError() {
        // Given
        when(alertingService.getActiveAlerts()).thenThrow(new RuntimeException("Alert service error"));

        // When
        ResponseEntity<List<AlertingService.Alert>> response = monitoringController.getActiveAlerts();

        // Then
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    @DisplayName("Should clear alert successfully")
    void clearAlert_WithValidId_ShouldReturnOk() {
        // Given
        String alertId = "test_alert";

        // When
        ResponseEntity<Map<String, String>> response = monitoringController.clearAlert(alertId);

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Alert cleared successfully", response.getBody().get("message"));
        assertEquals(alertId, response.getBody().get("alertId"));

        verify(alertingService).clearAlert(alertId);
    }

    @Test
    @DisplayName("Should handle exception when clearing alert")
    void clearAlert_WithException_ShouldReturnInternalServerError() {
        // Given
        String alertId = "test_alert";
        doThrow(new RuntimeException("Clear alert error")).when(alertingService).clearAlert(alertId);

        // When
        ResponseEntity<Map<String, String>> response = monitoringController.clearAlert(alertId);

        // Then
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    @DisplayName("Should clear all alerts successfully")
    void clearAllAlerts_ShouldReturnOk() {
        // Given
        List<AlertingService.Alert> alerts = new ArrayList<>();
        AlertingService.Alert alert1 = new AlertingService.Alert("alert1", "SYSTEM", "HIGH", "Message 1", null);
        AlertingService.Alert alert2 = new AlertingService.Alert("alert2", "SYSTEM", "MEDIUM", "Message 2", null);
        alerts.add(alert1);
        alerts.add(alert2);

        when(alertingService.getActiveAlerts()).thenReturn(alerts);

        // When
        ResponseEntity<Map<String, String>> response = monitoringController.clearAllAlerts();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("All alerts cleared successfully", response.getBody().get("message"));
        assertEquals("2", response.getBody().get("clearedCount"));

        verify(alertingService).clearAlert("alert1");
        verify(alertingService).clearAlert("alert2");
    }

    @Test
    @DisplayName("Should handle exception when clearing all alerts")
    void clearAllAlerts_WithException_ShouldReturnInternalServerError() {
        // Given
        when(alertingService.getActiveAlerts()).thenThrow(new RuntimeException("Get alerts error"));

        // When
        ResponseEntity<Map<String, String>> response = monitoringController.clearAllAlerts();

        // Then
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    @DisplayName("Should return metrics summary successfully")
    void getMetricsSummary_ShouldReturnSummary() {
        // When
        ResponseEntity<Map<String, Object>> response = monitoringController.getMetricsSummary();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().containsKey("system"));
        assertTrue(response.getBody().containsKey("application"));

        @SuppressWarnings("unchecked")
        Map<String, Object> system = (Map<String, Object>) response.getBody().get("system");
        assertTrue(system.containsKey("memoryUsed"));
        assertTrue(system.containsKey("memoryTotal"));
        assertTrue(system.containsKey("memoryMax"));
        assertTrue(system.containsKey("processors"));
    }

    @Test
    @DisplayName("Should handle exception when getting metrics summary")
    void getMetricsSummary_WithException_ShouldReturnInternalServerError() {
        // Given - This would require mocking Runtime.getRuntime() which is complex
        // For now, we'll test the basic structure

        // When
        ResponseEntity<Map<String, Object>> response = monitoringController.getMetricsSummary();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    @Test
    @DisplayName("Should trigger test alert successfully")
    void triggerTestAlert_ShouldReturnOk() {
        // When
        ResponseEntity<Map<String, String>> response = monitoringController.triggerTestAlert();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("Test alert triggered successfully", response.getBody().get("message"));
        assertEquals("high_transaction_volume", response.getBody().get("alertType"));

        verify(alertingService).alertHighTransactionVolume(1500L);
    }

    @Test
    @DisplayName("Should handle exception when triggering test alert")
    void triggerTestAlert_WithException_ShouldReturnInternalServerError() {
        // Given
        doThrow(new RuntimeException("Test alert error")).when(alertingService).alertHighTransactionVolume(anyLong());

        // When
        ResponseEntity<Map<String, String>> response = monitoringController.triggerTestAlert();

        // Then
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    @DisplayName("Should return monitoring status successfully")
    void getMonitoringStatus_ShouldReturnStatus() {
        // Given
        List<AlertingService.Alert> alerts = new ArrayList<>();
        Map<String, Object> healthStatus = new HashMap<>();
        healthStatus.put("overallStatus", "HEALTHY");

        when(alertingService.getActiveAlerts()).thenReturn(alerts);
        when(healthCheckService.getDetailedHealthStatus()).thenReturn(healthStatus);

        // When
        ResponseEntity<Map<String, Object>> response = monitoringController.getMonitoringStatus();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().containsKey("alerting"));
        assertTrue(response.getBody().containsKey("healthCheck"));
        assertTrue(response.getBody().containsKey("timestamp"));

        @SuppressWarnings("unchecked")
        Map<String, Object> alerting = (Map<String, Object>) response.getBody().get("alerting");
        assertEquals(true, alerting.get("active"));
        assertEquals(0, alerting.get("activeAlerts"));
        assertEquals("HEALTHY", alerting.get("status"));
    }

    @Test
    @DisplayName("Should handle exception when getting monitoring status")
    void getMonitoringStatus_WithException_ShouldReturnInternalServerError() {
        // Given
        when(alertingService.getActiveAlerts()).thenThrow(new RuntimeException("Status error"));

        // When
        ResponseEntity<Map<String, Object>> response = monitoringController.getMonitoringStatus();

        // Then
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
    }

    @Test
    @DisplayName("Should handle health check exception in monitoring status")
    void getMonitoringStatus_WithHealthCheckException_ShouldHandleGracefully() {
        // Given
        List<AlertingService.Alert> alerts = new ArrayList<>();
        when(alertingService.getActiveAlerts()).thenReturn(alerts);
        when(healthCheckService.getDetailedHealthStatus()).thenThrow(new RuntimeException("Health check error"));

        // When
        ResponseEntity<Map<String, Object>> response = monitoringController.getMonitoringStatus();

        // Then
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());

        @SuppressWarnings("unchecked")
        Map<String, Object> healthCheck = (Map<String, Object>) response.getBody().get("healthCheck");
        assertEquals(false, healthCheck.get("active"));
        assertTrue(healthCheck.containsKey("error"));
    }
}
